extern "C" %{
/*
 * Copyright (c) 2010-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 */
#include "dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

/*
 * Globals
 */
uplo     [type = dplasma_enum_t]
trans    [type = dplasma_enum_t]
descA    [type="const parsec_tiled_matrix_t*"]
descB    [type="parsec_tiled_matrix_t*"]
operator [type = "parsec_tiled_matrix_binary_op_t" ]
op_args  [type = "void *" ]

plasma_upper   [type="dplasma_enum_t" hidden=on default=dplasmaUpper ]
plasma_lower   [type="dplasma_enum_t" hidden=on default=dplasmaLower ]
plasma_notrans [type="dplasma_enum_t" hidden=on default=dplasmaNoTrans ]

L_m_limit      [type="int" hidden=on default="(((uplo == plasma_upper) && (trans == plasma_notrans)) || ((uplo == plasma_lower) && (trans != plasma_notrans)) ? 0 : descA->mt-1)" ]
U_n_limit      [type="int" hidden=on default="(((uplo == plasma_lower) && (trans == plasma_notrans)) || ((uplo == plasma_upper) && (trans != plasma_notrans)) ? 0 : descA->nt-1)" ]

map_l_in_Amn(m, n)   [profile = off]
  m = 1 .. L_m_limit
  n = 0 .. ( m < descA->nt ? m-1 : descA->nt-1 )

  : descA(m, n)

  RW A <- descA(m, n)
       -> (trans == plasma_notrans) ? A MAP_L(m, n)
       -> (trans != plasma_notrans) ? A MAP_U(n, m)

BODY
{
    /* nothing */
}
END

MAP_L(m, n)  [profile = off]
  // Execution space
  m = 1 .. ((uplo == plasma_upper) ? 0 : descB->mt-1)
  n = 0 .. ( m < descB->nt ? m-1 : descB->nt-1 )

  // Parallel partitioning
  : descB(m, n)

  // Parameters
  READ  A <- (trans == plasma_notrans) ? A map_l_in_Amn(m, n)
          <- (trans != plasma_notrans) ? A map_u_in_Amn(n, m)
  RW    B <- descB(m, n)
          -> descB(m, n)

BODY
{
    operator( es, descA, descB,
              A, B, dplasmaUpperLower, m, n, op_args );

    printlog("map_l( %d, %d )\n", m, n );
}
END

map_u_in_Amn(m, n)  [profile = off]
  m = 0   .. descA->mt-1
  n = m+1 .. U_n_limit

  : descA(m, n)

  RW A <- descA(m, n)
       -> (trans == plasma_notrans) ? A MAP_U(m, n)
       -> (trans != plasma_notrans) ? A MAP_L(n, m)

BODY
{
    /* nothing */
}
END

MAP_U(m, n)  [profile = off]
  // Execution space
  m = 0   .. descB->mt-1
  n = m+1 .. ((uplo == plasma_lower) ? 0 : descB->nt-1)

  // Parallel partitioning
  : descB(m, n)

  // Parameters
  READ  A <- (trans == plasma_notrans) ? A map_u_in_Amn(m, n)
          <- (trans != plasma_notrans) ? A map_l_in_Amn(n, m)
  RW    B <- descB(m, n)
          -> descB(m, n)

BODY
{
    operator( es, descA, descB,
              A, B, dplasmaUpperLower, m, n, op_args );

    printlog("map_u( %d, %d )\n", m, n );
}
END

map_diag_in_Akk(k)  [profile = off]
  k = 0 .. ( descB->mt < descB->nt ? descB->mt-1 : descB->nt-1 )

  : descA(k, k)

  RW A <- descA(k, k)
       -> A MAP_DIAG(k)

BODY
{
    /* nothing */
}
END

MAP_DIAG(k) [profile = off]
  // Execution space
  k = 0 .. ( descB->mt < descB->nt ? descB->mt-1 : descB->nt-1 )

  // Parallel partitioning
  : descB(k, k)

  // Parameters
  READ  A <- A map_diag_in_Akk(k)
  RW    B <- descB(k, k)
          -> descB(k, k)

BODY
{
    operator( es, descA, descB,
              A, B, uplo, k, k, op_args );

    printlog("map_diag( %d, %d )\n", k, k );
}
END
