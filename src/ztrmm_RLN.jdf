extern "C" %{
/*
 * Copyright (c) 2010-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

/* Define the different shapes this JDF is using */
#define A_SHAPE 0
#define B_SHAPE 1

/* Assume the functions on type & type_remote will return parsec_arena_datatype_t */
#define JDF2C_TYPE_ADT_NOT_INDEX

/* Include the functions to obtain the parsec_arena_datatype_t */
#include "dplasmajdf_lapack_dtt.h"
//#define FULL_CONVERSION
#ifdef FULL_CONVERSION
#define ADTT_READ(dM, loc, shape, layout) ADTT_DC(dM, loc, shape, layout)
#else
#define ADTT_READ(dM, loc, shape, layout) ADTT_DC(dM, loc, shape, LAPACK)
#endif

/* Note: with this approach to support LAPACK format and minimize
 * the number of tile conversions performed, it is critical to
 * determined the correct location on the matrix where the tile was
 * originated from.
 * Note that the LOC parameters do not correspond to the binding of the
 * task to the matrix (although sometimes they match). These parameters
 * correspond to the location were the datacopy was originate on the matrix (maybe
 * it was read on another task).
 * If there is no possibility to determine it (datacopy passed along multiple
 * tasks and that information is lost) the approach is to force a reshapping.
 *
 */

%}

side      [type = "dplasma_enum_t"]
uplo      [type = "dplasma_enum_t"]
trans     [type = "dplasma_enum_t"]
diag      [type = "dplasma_enum_t"]
alpha     [type = "dplasma_complex64_t"]

ddescA     [type = "dplasma_data_collection_t*"]
descA      [type = "const parsec_tiled_matrix_t*" hidden = on default = "((dplasma_data_collection_t*)ddescA)->dc_original" aligned=ddescA]

ddescB     [type = "dplasma_data_collection_t*"]
descB      [type = "parsec_tiled_matrix_t*" hidden = on default = "((dplasma_data_collection_t*)ddescB)->dc_original" aligned=ddescB]

read_A(n, k) [profile = off]
  /* Execution Space */
  n = 0 .. (descB->nt-1)
  k = n .. (descB->nt-1)

loc_A = %{ return LOC(descA, k, n); %}

  /* Locality */
  : descA(k, n)

  READ  A    <- ddescA(k, n)                               [ type        = %{ return ADTT_READ(ddescA, loc_A, A_SHAPE, TILED); %}
                                                             type_data   = %{ return ADTT_READ(ddescA, loc_A, A_SHAPE, LAPACK); %} ]
             -> (n == k) ? A ztrmm(n, 0..(descB->mt-1))    /* dep OUT: rely on datacopy dtt for sending */
             -> (n != k) ? B zgemm(n, 0..(descB->mt-1), k) /* dep OUT: rely on datacopy dtt for sending */
BODY
{
    /* nothing */
}
END

read_B(m, k) [profile = off]
  /* Execution Space */
  m = 0 .. (descB->mt-1)
  k = 1 .. (descB->nt-1)

loc_B = %{ return LOC(descB, m, k); %}

  /* Locality */
  : descB(m,k)

  READ  B    <- ddescB(m,k)              [ type        = %{ return ADTT_READ(ddescB, loc_B, B_SHAPE, TILED); %}
                                           type_data   = %{ return ADTT_READ(ddescB, loc_B, B_SHAPE, LAPACK); %} ]
             -> A zgemm(0 .. (k-1), m, k) /* dep OUT: rely on datacopy dtt for sending */

BODY
{
    /* nothing */
}
END

ztrmm(n, m) [ flops = inline_c %{ return FLOPS_ZTRMM(side, CLEAN_MB(descB, m), CLEAN_NB(descB, n)); %} ]
  /* Execution Space */
  n = 0 .. (descB->nt-1)
  m = 0 .. (descB->mt-1)

loc_A = %{ return LOC(descA, n, n); %}
loc_B = %{ return LOC(descB, m, n); %}

  /* Locality */
  : descB(m,n)

  CTL   ctl0 <- ctl0 zgemm(0..n-1, m, n)
  READ  A    <- A read_A(n,n)                             [ type_remote = %{ return ADTT_DC(ddescA, loc_A, A_SHAPE, TILED); %} ]
  RW    B    <- ddescB(m,n)                               [ type        = %{ return ADTT_READ(ddescB, loc_B, B_SHAPE, TILED); %}
                                                            type_data   = %{ return ADTT_READ(ddescB, loc_B, B_SHAPE, LAPACK); %} ]
             -> (n <  (descB->nt-1)) ? C zgemm(n, m, n+1) /* dep OUT: rely on datacopy dtt for sending */
             -> (n == (descB->nt-1)) ? ddescB(m,n)        [ type        = %{ return ADTT_CP(_f_B, ddescB, loc_B, B_SHAPE); %}
                                                            type_data   = %{ return ADTT_DC(ddescB, loc_B, B_SHAPE, LAPACK); %} ]

BODY
{
    int tempmm = ((m)==(descB->mt-1)) ? (descB->m-(m*descB->mb)) : descB->mb;
    int tempnn = ((n)==(descB->nt-1)) ? (descB->n-(n*descB->nb)) : descB->nb;
    int lda = LDA(ddescA, A);
    int ldb = LDA(ddescB, B);

    printlog("CORE_ztrmm(%d, %d)\n"
             "\t(side, uplo, trans, diag, tempmm, tempnn, alpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], ldb)\n",
             n, m, n, n, A, m, n, B);
    CORE_ztrmm(side, uplo, trans,
               diag, tempmm, tempnn,
               alpha, A /* descA(n,n) */, lda,
                      B /* descB(m,n) */, ldb );
}
END

zgemm(n, m, k) [ flops = inline_c %{ return FLOPS_ZGEMM(CLEAN_MB(descB, m), CLEAN_NB(descB, n), CLEAN_NB(descA, k)); %} ]
  /* Execution Space */
  n = 0     .. (descB->nt-2)
  m = 0     .. (descB->mt-1)
  k = (n+1) .. (descB->nt-1)

loc_A = %{ return LOC(descB, m, k); %}
loc_B = %{ return LOC(descA, k, n); %}
loc_C = %{ return LOC(descB, m, n); %}

  /* Locality */
  : descB(m,n)

  CTL   ctl0 -> ctl0 ztrmm(k, m)
  READ  A    <- B read_B(m, k)                            [ type_remote = %{ return ADTT_DC(ddescB, loc_A, B_SHAPE, TILED); %} ]
  READ  B    <- A read_A(n, k)                            [ type_remote = %{ return ADTT_DC(ddescA, loc_B, A_SHAPE, TILED); %} ]
  RW    C    <- (k >= (n+2)) ? C zgemm(n, m, k-1)         [ type_remote = %{ return ADTT_DC(ddescB, loc_C, B_SHAPE, TILED); %} ]
             <- (k == (n+1)) ? B ztrmm(k-1, m)            [ type_remote = %{ return ADTT_DC(ddescB, loc_C, B_SHAPE, TILED); %} ]
             -> (k == (descB->nt-1)) ? ddescB(m,n)        [ type        = %{ return ADTT_CP(_f_C, ddescB, loc_C, B_SHAPE); %}
                                                            type_data   = %{ return ADTT_DC(ddescB, loc_C, B_SHAPE, LAPACK); %} ]
             -> (k <  (descB->nt-1)) ? C zgemm(n, m, k+1) /* dep OUT: rely on datacopy dtt for sending */

BODY
{
    int tempmm = ((m)==(descB->mt-1)) ? (descB->m-(m*descB->mb)) : descB->mb;
    int tempnn = ((n)==(descB->nt-1)) ? (descB->n-(n*descB->nb)) : descB->nb;
    int tempkn = ((k)==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int lda = LDA(ddescB, A);
    int ldb = LDA(ddescA, B);
    int ldc = LDA(ddescB, C);

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(dplasmaNoTrans, trans, tempmm, tempnn, tempkn, alpha, B(%d,%d)[%p], ldb, A(%d,%d)[%p], ldak, 1.000000, B(%d,%d)[%p], ldb)\n",
             n, m, k, m, k, A, k, n, B, m, n, C);
    CORE_zgemm(dplasmaNoTrans, trans, tempmm, tempnn, tempkn,
               alpha, A /* descB(m,k) */, lda,
                      B /* descA(k,n) */, ldb,
               1.0,   C /* descB(m,n) */, ldc );
}
END
