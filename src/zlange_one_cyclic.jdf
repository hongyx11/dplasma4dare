extern "C" %{
/*
 * Copyright (c) 2010-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 * @precisions normal z -> s d c
 *
 *
 * This jdf returns the value of the one norm of a matrix A
 * where the one norm  of a matrix is the maximum column sum.
 *
 * This jdf is optimized for 2D-Block cyclic distributed data with a grid
 * P-by-Q.
 * The first step sums the local data of each columns.
 * The second finishes the sums on each columns. At the end of this step, all P
 * processes belonging to a column have the same data.
 * The third step search the local maximum.
 * The fourth step combines the local maxima together. At the end all processes
 * owns the same value.
 *
 * The reductions are down by a pipeline folowed by a broadcast of the results.
 *
 */
#include <math.h>
#include "dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

/* Globals
 */
P            [type = "int"]
Q            [type = "int"]
ntype        [type = "dplasma_enum_t"]
uplo         [type = "dplasma_enum_t"]
diag         [type = "dplasma_enum_t"]
descA        [type = "const parsec_tiled_matrix_t*"]
Tdist        [type = "parsec_data_collection_t *"]
norm         [type = "double *"]

minMNT       [type = "int" hidden=on default="dplasma_imin( descA->mt, descA->nt )" ]
minMN        [type = "int" hidden=on default="dplasma_imin( descA->m,  descA->n )"  ]
MT           [type = "int" hidden=on default="(uplo == dplasmaUpper) ? minMNT : descA->mt"]
NT           [type = "int" hidden=on default="(uplo == dplasmaLower) ? minMNT : descA->nt"]
M            [type = "int" hidden=on default="(uplo == dplasmaUpper) ? minMN  : descA->m"]
N            [type = "int" hidden=on default="(uplo == dplasmaLower) ? minMN  : descA->n"]

/**************************************************
 *
 *                    STEP 1
 *
 *  For j in [1,P], W(i, n) = reduce( A(i+k*P, n) )
 *
 **************************************************/
STEP1(m,n)

    // Execution space
    m = 0 .. MT-1
    nmin = %{ if (uplo == dplasmaUpper ) return m; else return 0; %}
    nmax = %{ if (uplo == dplasmaLower ) return dplasma_imin(m, NT-1); else return NT-1; %}
    n = nmin .. nmax

    mmin = %{ if (uplo == dplasmaLower ) return n; else return 0; %}
    mmax = %{ if (uplo == dplasmaUpper ) return dplasma_imin(n, MT-1); else return MT-1; %}

    // Parallel partitioning
    :descA(m, n)

    // Parameters
    READ A <-  descA(m, n)
    RW   W <-  ( m <  (mmax+1-P)) ? W STEP1( m+P, n )                     [type_remote = COL]
           <-  ( m >= (mmax+1-P)) ? NEW                                   [type = COL]
           ->  ( m <  (mmin+P)  ) ? W STEP2( m%P, n ) : W STEP1( m-P, n ) [type_remote = COL]

BODY
{
    int tempmm = ( m == (MT-1) ) ? M - m * descA->mb : descA->mb;
    int tempnn = ( n == (NT-1) ) ? N - n * descA->nb : descA->nb;
    int ldam = BLKLDD( descA, m );

    printlog("zlange STEP1(%d, %d)\n"
             "\t( tempmm=%d, tempnn=%d, A(%d, %d)[%p], lda=%d, W(%d,%d)[%p])\n",
             m, n, tempmm, tempnn, m, n, A, ldam, m, n%Q, W);

    if( m > (mmax-P)) {
        memset( W, 0, descA->nb * sizeof(double) );
    }

    if ( (m == n) && (uplo != dplasmaUpperLower) ) {
        CORE_ztrasm( dplasmaColumnwise, uplo, diag,
                     tempmm, tempnn,
                     A, ldam, W);
    }
    else {
        CORE_dzasum(dplasmaColumnwise, dplasmaUpperLower,
                    tempmm, tempnn,
                    A, ldam, W);
    }
}
END

/**************************************************
 *                    STEP 2
 *
 *  For each i, W(i, n) = reduce( W(0..P-1, n) )
 *
 **************************************************/
STEP2(m, n)

    // Execution space
    m = 0 .. P-1
    n = 0 .. NT-1
    row  = %{
    if ( uplo == dplasmaLower ) {
        return (m >= n%P ) ? n + m - n%P : n + m + P - n%P;
    } else {
        return m;
    } %}
    mmax = %{ if (uplo == dplasmaUpper ) return dplasma_imin(n, MT-1); else return MT-1; %}

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ A <- ( m   == 0    ) ? NULL               : W STEP2(m-1, n) [type_remote = COL]
    RW   W <- ( row >  mmax ) ? NEW                                  [type = COL]
           <- ( row <= mmax ) ? W STEP1(row, n)                      [type_remote = COL]
           -> ( m   == (P-1)) ? A STEP3(0..P-1, n) : A STEP2(m+1, n) [type_remote = COL]

BODY
{
    int tempnn = ( n == (NT-1) ) ? N - n * descA->nb : descA->nb;

    printlog("zlange STEP2(%d, %d)\n"
             "\t( tempnn=%d, W(%d, %d) + W(%d, %d)\n",
             m, n, tempnn, m-1, n, m, n);

    if( row > mmax) {
        memset( W, 0, descA->nb * sizeof(double) );
    }
    if(m > 0)
    {
        cblas_daxpy( tempnn, 1., A, 1, W, 1);
    }
}
END


/**************************************************
 *
 *                    STEP3
 *
 * For n in 0..Q-1, W(m, n) = max( W(m, n..nt[Q] ) )
 *
 **************************************************/
STEP3(m, n)

    // Execution space
    m = 0 .. P-1
    n = 0 .. NT-1

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ A <- W STEP2(P-1, n)                                       [type_remote = COL]
    RW   W <- (n <  (NT-Q)) ? W STEP3( m, n+Q )                     [type_remote = ELT]
           <- (n >= (NT-Q)) ? NEW                                   [type = ELT]
           -> (n <  Q     ) ? W STEP4( m, n   ) : W STEP3( m, n-Q ) [type_remote = ELT]

BODY
{
    int tempnn = ( n == (NT-1) ) ? N - n * descA->nb : descA->nb;

    printlog("zlange STEP3(%d, %d)\n", m, n);

    double *dA = (double*)A;
    double *dW = (double*)W;
    double maxval = 0;
    int i;

    for(i = 0; i < tempnn; i++, dA++)
        maxval = ( maxval > *dA ) ? maxval : *dA;

    if ( n < (NT-Q) ) {
        *dW = ( maxval > *dW ) ? maxval : *dW;
    } else {
        *dW = maxval;
    }
}
END

/**************************************************
 *                    STEP 4
 *
 *  For each j, W(m, j) = max( W(m, 0..Q-1) )
 *
 **************************************************/
STEP4(m,n)

    // Execution space
    m = 0..P-1
    n = 0..Q-1

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ A <- ( n ==  0     ) ? NULL                   : W STEP4(m, n-1) [type_remote = ELT]
    RW   W <- ( n >  (NT-1) ) ? NEW                                      [type = ELT]
           <- ( n <= (NT-1) ) ? W STEP3(m, n  )                          [type_remote = ELT]
           -> ( n == (Q-1)  ) ? W WRITE_RES(m, 0..Q-1) : A STEP4(m, n+1) [type_remote = ELT]

BODY
{
    printlog("zlange STEP4(%d, %d)\n", m, n);

    double *dA = (double*)A;
    double *dW = (double*)W;
    if(n > (NT-1)) {
        *dW = 0;
    }
    if(n > 0) {
        *dW = ( *dA > *dW ) ? *dA : *dW;
    }
}
END

/**************************************************
 *                      STEP5                     *
 **************************************************/
WRITE_RES(m,n)

    // Execution space
    m = 0..P-1
    n = 0..Q-1

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ W <- W STEP4( m, Q-1 )   [type_remote = ELT]

BODY
{
    *norm = *( (double*)W );
}
END
