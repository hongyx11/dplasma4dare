extern "C" %{
/*
 * Copyright (c) 2010-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

uplo      [type = "dplasma_enum_t"]
diag      [type = "dplasma_enum_t"]
descA     [type = "parsec_tiled_matrix_t*"]
INFO      [type = "int*"]


trtri_ztrsmR(k, m) [ flops = inline_c %{ return FLOPS_ZTRSM(PlasmaRight, CLEAN_MB(descA, m), descA->nb); %}]
  /* Execution Space */
  k = 0     .. (descA->mt-2)
  m = (k+1) .. (descA->mt-1)

  /* Locality */
  : descA(m, k)

  CTL   ctl  -> (k == 0) ? ctlr trtri_ztrtri(0)

  READ  A    <- A ztrsm_in_A(k)        [type_remote = LOWER_TILE]

  RW    B    <- descA(m, k)
                 /* Read Only tasks */
             -> (m == (k+1)) & (k < (descA->mt-2)) ? B trtri_zgemm(k+1, (m+1)..(descA->mt-1), k)
             -> (k > 0) ? A trtri_zgemm(k, m, 0..(k-1))

                 /* RW tasks */
             -> (m == (k+1)) ? B trtri_ztrsmL(k+1, k)
             -> (m >  (k+1)) ? C trtri_zgemm(k+1, m, k)

BODY
{
    int tempmm = (m == (descA->mt-1)) ? (descA->m - m*descA->mb) : descA->mb;
    int tempkn = (k == (descA->nt-1)) ? (descA->n - k*descA->nb) : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    printlog("CORE_ztrsm(%d, %d)\n"
             "\t(dplasmaRight, uplo, dplasmaNoTrans, diag, tempmm, tempkn, -1, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam)\n",
             k, m, k, k, A, m, k, B);

    CORE_ztrsm(dplasmaRight, uplo, dplasmaNoTrans, diag,
               tempmm, tempkn,
               -1.0, A /* descA(k,k) */, ldak,
                     B /* descA(m,k) */, ldam );
}
END

trtri_zgemm(k, m, n)  [ flops = inline_c%{ return FLOPS_ZGEMM(CLEAN_MB(descA, m), descA->nb, descA->mb); %} ]
  /* Execution Space */
  k = 1     .. (descA->mt-2)
  m = (k+1) .. (descA->mt-1)
  n = 0     .. (k-1)

  /* Locality */
  : descA(m, n)

    /* Release trtri_ztrsmL using A as C in next step */
  CTL   ctlA -> (m == (k+1)) ? ctlA trtri_ztrsmL(k+1, k)
    /* Release GEMM using A as C in next step */
             -> (m >  (k+1)) ? ctlC trtri_zgemm(k+1, m, k)

    /* Release trtri_ztrsmL that will modify the local B as C */
  CTL   ctlB -> ctlB trtri_ztrsmL(k, n)

    /* Wait until C is not used as A anymore */
  CTL   ctlC <- (n == (k-1)) ? ctlA trtri_zgemm(k-1, m, 0 .. (n-1))

  READ  A    <- B trtri_ztrsmR(k, m)

  READ  B    <- (k == (n+1)) ? B trtri_ztrsmR(k-1, k)
             <- (k >  (n+1)) ? C trtri_zgemm(k-1, k, n)

  RW    C    <- (k == (n+1)) ? B trtri_ztrsmR(k-1, m)
             <- (k >  (n+1)) ? C trtri_zgemm(k-1, m, n)

             -> (m == (k+1)) ? B trtri_ztrsmL(k+1, n)
             -> (m >  (k+1)) ? C trtri_zgemm(k+1, m, n)
             -> (m == (k+1)) &  (k < (descA->mt-2)) ? B trtri_zgemm(k+1, (m+1)..(descA->mt-1), n)

BODY
{
    int tempmm = (m == (descA->mt-1)) ? (descA->m - m*descA->mb) : descA->mb;
    int tempnn = (n == (descA->nt-1)) ? (descA->n - n*descA->nb) : descA->nb;
    int tempkn = (k == (descA->nt-1)) ? (descA->n - k*descA->nb) : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(dplasmaNoTrans, dplasmaNoTrans, tempmm, tempnn, tempkn, 1.000000, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], ldam)\n",
             k, m, n, m, k, A, k, n, B, m, n, C);

    CORE_zgemm(dplasmaNoTrans, dplasmaNoTrans,
               tempmm, tempnn, tempkn,
               1.0, A /* descA(m,k) */, ldam,
                    B /* descA(k,n) */, ldak,
               1.0, C /* descA(m,n) */, ldam );
}
END


trtri_ztrsmL(k, n) [ flops = inline_c %{ return FLOPS_ZTRSM(PlasmaLeft, CLEAN_MB(descA, k), descA->nb); %}]
  /* Execution Space */
  k = 1 .. (descA->nt-1)
  n = 0 .. (k-1)

  /* Locality */
  : descA(k, n)

    /* Wait until no more gemms using local B as their A */
  CTL   ctlA <- ((n == (k-1)) && (k > 1)) ? ctlA trtri_zgemm( k-1, k, 0 .. (k-2) )

    /* Wait until no more gemms using local B as their B */
  CTL   ctlB <- (k < (descA->mt-1)) ? ctlB trtri_zgemm( k, (k+1) .. (descA->mt-1), n )

    /* Release the trtri_ztrtri on A(k,k) */
  CTL   ctl  -> ctll trtri_ztrtri(k)

  READ  A    <- A ztrsm_in_A(k)        [type_remote = LOWER_TILE]
  RW    B    <- (k == (n+1)) ? B trtri_ztrsmR(k-1, k)
             <- (k >  (n+1)) ? C trtri_zgemm(k-1, k, n)
             -> descA(k, n)

BODY
{
    int tempkn = (k == (descA->nt-1)) ? (descA->n - k*descA->nb) : descA->nb;
    int ldak = BLKLDD( descA, k );

    printlog("CORE_ztrsm(%d, %d)\n"
             "\t(dplasmaLeft, uplo, dplasmaNoTrans, diag, tempkn, descA->mb, 1.000000, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak)\n",
             k, n, k, k, A, k, n, B);

    CORE_ztrsm(dplasmaLeft, uplo, dplasmaNoTrans, diag,
               tempkn, descA->mb,
               1.0, A /* descA(k,k) */, ldak,
                    B /* descA(k,n) */, ldak );
}
END

ztrsm_in_A(k) [profile = off]
  /* Execution Space */
  k = 0 .. (descA->nt-1)

  /* Locality */
  : descA(k,k)

  READ  A    <- descA(k,k)                                                /*[type = LOWER_TILE type_data = LOWER_TILE]*/
             -> (k < descA->mt-1) ? A trtri_ztrsmR(k, (k+1)..(descA->mt-1)) [type_remote = LOWER_TILE]
             -> (k > 0)          ? A trtri_ztrsmL(k, 0..(k-1))              [type_remote = LOWER_TILE]

BODY
{
    /* nothing */
}
END

trtri_ztrtri(k) [ flops = inline_c %{ return FLOPS_ZTRTRI(CLEAN_NB(descA, k)); %} ]
  /* Execution Space */
  k = 0 .. (descA->nt-1)

  /* Locality */
  : descA(k, k)

  CTL   ctlr  <- ((k == 0)  && (descA->mt > 1)) ? ctl trtri_ztrsmR(0, 1 .. descA->mt-1)
  CTL   ctll  <-  (k > 0)                      ? ctl trtri_ztrsmL(k, 0 .. k-1)

  RW    A    <- descA(k,k)   /*[type = LOWER_TILE type_data = LOWER_TILE]*/
             -> descA(k,k)     [type = LOWER_TILE type_data = LOWER_TILE]

BODY
{
    int tempkn = (k == (descA->nt-1)) ? (descA->n - k*descA->nb) : descA->nb;
    int ldak = BLKLDD( descA, k );
    int info = 0;

    printlog("CORE_ztrtri(%d)\n"
             "\t(uplo, diag, tempkn, A(%d,%d)[%p], ldan, sequence, request, descA->nb*k)\n",
             k, k, k, A);

    CORE_ztrtri(uplo, diag, tempkn,
                A /* descA(k,k) */, ldak, &info );

    if ( info != PLASMA_SUCCESS) {
        *INFO = k*descA->mb + info; /* Should return if enter here */
        fprintf(stderr, "ztrtri(%d) failed => %d\n", k, *INFO );
    }

}
END
